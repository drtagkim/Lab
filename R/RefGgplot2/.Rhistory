bar_example1 <- function() {
dat <- data.frame(
time = factor(c("Lunch","Dinner"), levels=c("Lunch","Dinner")),
total_bill = c(14.89, 17.23)
)
ggplot(data=dat, aes(x=time, y=total_bill)) +
geom_bar(stat="identity")
}
bar_example2 <- function() {
dat <- data.frame(
time = factor(c("Lunch","Dinner"), levels=c("Lunch","Dinner")),
total_bill = c(14.89, 17.23)
)
# Map the time of day to different fill colors
ggplot(data=dat, aes(x=time, y=total_bill, fill=time)) +
geom_bar(stat="identity")
}
bar_example3 <- function() {
dat <- data.frame(
time = factor(c("Lunch","Dinner"), levels=c("Lunch","Dinner")),
total_bill = c(14.89, 17.23)
)
# Add a black outline
ggplot(data=dat, aes(x=time, y=total_bill, fill=time)) +
geom_bar(colour="black", stat="identity")
}
bar_example4 <- function() {
dat <- data.frame(
time = factor(c("Lunch","Dinner"), levels=c("Lunch","Dinner")),
total_bill = c(14.89, 17.23)
)
ggplot(data=dat, aes(x=time, y=total_bill, fill=time)) +
geom_bar(colour="black", stat="identity") +
guides(fill=FALSE)
}
library(tidyverse)
bar_example5 <- function() {
dat <- data.frame(
time = factor(c("Lunch","Dinner"), levels=c("Lunch","Dinner")),
total_bill = c(14.89, 17.23)
)
# Add title, narrower bars, fill color, and change axis labels
ggplot(data=dat, aes(x=time, y=total_bill, fill=time)) +
geom_bar(colour="black", fill="#DD8888", width=.8, stat="identity") +
guides(fill=FALSE) +
xlab("Time of day") + ylab("Total bill") +
ggtitle("Average bill for 2 people")
}
bar_example1()
bar_example2()
bar_example3()
bar_example4()
bar_example5()
## Equivalent to this, since stat="bin" is the default:
# ggplot(data=tips, aes(x=day)) +
#    geom_bar()
}
bar_example6 <- function() {
# Bar graph of counts
ggplot(data=tips, aes(x=day)) +
geom_bar(stat="count")
## Equivalent to this, since stat="bin" is the default:
# ggplot(data=tips, aes(x=day)) +
#    geom_bar()
}
bar_example6()
library(reshape2)
bar_example6()
library(RefGgplot2)
library(RefGgplot2)
library(RefGgplot2)
dat <- data.frame(
time = factor(c("Lunch","Dinner"), levels=c("Lunch","Dinner")),
total_bill = c(14.89, 17.23)
)
save(dat,file="data/dat.RData")
library(RefGgplot2)
dat
dat
dat
View(dat)
data(dat)
dat
line_example1 <- function() {
ggplot(data=dat, aes(x=time, y=total_bill, group=1)) +
geom_line()
}
line_example1()
line_example2 <- function() {
ggplot(data=dat, aes(x=time, y=total_bill, group=1)) +
geom_line() +
geom_point()
}
line_example2()
line_example3 <- function() {
ggplot(data=dat, aes(x=time, y=total_bill, group=1)) +
geom_line(colour="red", linetype="dashed", size=1.5) +
geom_point(colour="red", size=4, shape=21, fill="white")
}
line_example3()
line_example4 <- function() {
ggplot(data=dat, aes(x=time, y=total_bill, group=1)) +
geom_line() +
geom_point() +
expand_limits(y=0) +
xlab("Time of day") + ylab("Total bill") +
ggtitle("Average bill for 2 people")
}
line_example4()
library(RefGgplot2)
line_example10 <- function() {
# A line graph
ggplot(data=dat1, aes(x=time, y=total_bill, group=sex, shape=sex, colour=sex)) +
geom_line(aes(linetype=sex), size=1) +     # Set linetype by sex
geom_point(size=3, fill="white") +         # Use larger points, fill with white
expand_limits(y=0) +                       # Set y range to include 0
scale_colour_hue(name="Sex of payer",      # Set legend title
l=30)  +                  # Use darker colors (lightness=30)
scale_shape_manual(name="Sex of payer",
values=c(22,21)) +      # Use points with a fill color
scale_linetype_discrete(name="Sex of payer") +
xlab("Time of day") + ylab("Total bill") + # Set axis labels
ggtitle("Average bill for 2 people") +     # Set title
theme_bw() +
theme(legend.position=c(.7, .4))           # Position legend inside
# This must go after theme_bw
}
line_example10()
dat1 <- data.frame(
sex = factor(c("Female","Female","Male","Male")),
time = factor(c("Lunch","Dinner","Lunch","Dinner"), levels=c("Lunch","Dinner")),
total_bill = c(13.53, 16.81, 16.24, 17.42)
)
save(dat1,file="data/dat1.RData")
line_example10()
library(RefGgplot2)
datn <- read.table(header=TRUE, text='
supp dose length
OJ  0.5  13.23
OJ  1.0  22.70
OJ  2.0  26.06
VC  0.5   7.98
VC  1.0  16.77
VC  2.0  26.14
')
save(datn,file="data/datn.RData")
line_example11 <- function() {
ggplot(data=datn, aes(x=dose, y=length, group=supp, colour=supp)) +
geom_line() +
geom_point()
}
line_example11()
tg <- ToothGrowth
save(tg,file="data/tg.RData")
tgc <- summarySE(tg, measurevar="len", groupvars=c("supp","dose"))
summarySE <- function(data=NULL, measurevar, groupvars=NULL, na.rm=FALSE,
conf.interval=.95, .drop=TRUE) {
library(plyr)
# New version of length which can handle NA's: if na.rm==T, don't count them
length2 <- function (x, na.rm=FALSE) {
if (na.rm) sum(!is.na(x))
else       length(x)
}
# This does the summary. For each group's data frame, return a vector with
# N, mean, and sd
datac <- ddply(data, groupvars, .drop=.drop,
.fun = function(xx, col) {
c(N    = length2(xx[[col]], na.rm=na.rm),
mean = mean   (xx[[col]], na.rm=na.rm),
sd   = sd     (xx[[col]], na.rm=na.rm)
)
},
measurevar
)
# Rename the "mean" column
datac <- rename(datac, c("mean" = measurevar))
datac$se <- datac$sd / sqrt(datac$N)  # Calculate standard error of the mean
# Confidence interval multiplier for standard error
# Calculate t-statistic for confidence interval:
# e.g., if conf.interval is .95, use .975 (above/below), and use df=N-1
ciMult <- qt(conf.interval/2 + .5, datac$N-1)
datac$ci <- datac$se * ciMult
return(datac)
}
get_tgc <- function() {
tgc <- summarySE(tg, measurevar="len", groupvars=c("supp","dose"))
tgc
}
get_tgc()
save(tgc,file="data/tgc.RData")
tgc <- get_tgc()
save(tgc,file="data/tgc.RData")
library(RefGgplot2)
library(RefGgplot2)
remotes::install_github('drtagkim/lab/r/refggplot2')
remotes::install_github('drtagkim/Lab/R/RefGgplot2')
bar_example2()
library(RefGgplot2)
bar_example2()
bar_example1()
bar_example2()
dat1 <- data.frame(
sex = factor(c("여성","여성","남성","남성")),
time = factor(c("점심","저녁","점심","저녁"), levels=c("점심","저녁")),
total_bill = c(13000, 17000, 16000, 17500)
)
library(jsonlite)
text<-clipr::read_clipboard()
text <- clipr::read_clip()
fromJSON(text)
library(dplyr)
text <- clipr::read_clip()
text <- clipr::read_clip() %>% paste(collapse='')
fromJSON(text)
text <- clipr::read_clip()
fromJSON(text)
text <- clipr::read_clip() %>% paste(collapse = '')
fromJSON(text)
text <- clipr::read_clip() %>% paste(collapse = '')
fromJSON(text)
temp<-fromJSON(text)
str(temp)
temp$item
library(purrr)
temp %>% map(.$item)
temp %>% map(.$subject)
temp %>% map(~.$subject)
temp %>% map(~.$keyword)
temp %>% map(~.$ground)
